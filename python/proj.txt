#GUI Libraries
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import ttk, StringVar, Canvas, font
import tkinter.filedialog as filedialog

#import os 
import os
import webbrowser
#Other functional importations: 
from pathlib import Path
import tkinter.messagebox as messagebox
import re
import subprocess
import socket

#Imports used for entry
from datetime import datetime
import json
import random

# Global variables tack visitor's inputs
global REASON, input_name, current_time, input_company, input_contact, input_explanation, input_others, accompanied_check, transaction_id

HEADER = ['Transaction ID', 'Time', 'Name', 'Type', 'Company', 'Contact']


"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    1.  Helper Functions 
        - 1. get_db(): retrives the current databse for the current data 
        - 2. trans_id(): generates an ID for the transaction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""

#    Retrieves current database for writing, JSON files can be converted to CSV files. 
#      Format is as follows: 
#          [1]: Parent Directory -> month_year
#          [2]: File Name -> day_month_year.json 
def get_db(): 
    date = datetime.today() 

    folder_name = str(date.month) + '_' + str(date.year)
    file_name = str(date.day)+ '_' + str(date.month) + '_' + str(date.year)
    
    directory = folder_name
    file_addr = folder_name + '/' + file_name + '.json'

    # Check if the current month's directory exists
    if not os.path.exists(directory):
            os.makedirs(directory)
    
    # Check if today's file has been created yet - if false, create it: 
    if not os.path.exists(file_addr):
        f = open(file_addr, "x") 
        
    print('Directory setup successfully!')

def trans_id(): 
    hash = random.getrandbits(32)
    return hash 

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    1. Application Frames Classes and Functions 

        - 1. SplashFrame() displays a background image while application elements load (one-time thing)
        - 2. WelcomeFrame() prompts visitors to enter their name and the type of visitor they are 
        - 3. VisitorFrame(): asks visitors for their information, allows them to check-in other fellow visitors
        - 4. ContractorFrame(): asks contractors for their informaiton, allows them to check-in other fellow visitors

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"""
## Define Frames ##
class SplashFrame(tk.Frame):
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")
        globals()["EXPAND"] = False

        # create a canvas to draw on
        self.canvas = tk.Canvas(self, width=1920, height=1080, highlightthickness=0, bg="#FFFFFF")
        self.canvas.pack(fill="both", expand=True)

        # load the background image
        img = Image.open("background.png")

        # resize the image to fit the frame
        img = img.resize((1920, 1080), Image.LANCZOS)

        # create a Tkinter photo image from the PIL image
        background_image = ImageTk.PhotoImage(img)

        # create a background label and add it to the canvas
        self.background_label = tk.Label(self.canvas, image=background_image)
        self.background_label.image = background_image
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

    def update(self):
        self.lift()
        self.master.after(3500, self.destroy)

        #root.geometry('1980x1080')


# Welcome Frame: Wecomes users to the platform, provides authentication to the server
class WelcomeFrame(tk.Frame):
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")

        root.geometry('1980x1080')

        # Create and place the image
        self.image = tk.PhotoImage(file="icon.png")
        self.image_label = tk.Label(self, image=self.image, bg="#FFFFFF")
        self.image_label.pack(side=tk.TOP, padx=20, pady=20)

        # Create and place the welcome label
        welcome_lbl = tk.Label(self, text="Welcome!", font=('Helvetica', 36, 'bold'), fg="#333333", bg="#FFFFFF")
        welcome_lbl.pack(pady=(0, 30))

        # Create and place the net-id entry widget
        input_frame = tk.Frame(self, bg="#FFFFFF")
        input_frame.pack(pady=(0, 40))

        netid_label = tk.Label(input_frame, text="Name:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        netid_label.grid(row=0, column=0, padx=(0, 10))

        self.netid_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.netid_entry.grid(row=0, column=1, padx=(0, 10), ipadx=10, ipady=10, sticky="ew")

        dropdown_label = tk.Label(input_frame, text="I am a..", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        dropdown_label.grid(row=1, column=0, padx=(0, 20))

        self.t_e_dropdown = ttk.Combobox(input_frame, state="readonly", values=["Visitor", "Contractor [Performing Work]", "New Employee [Orientation]"])
#        self.t_e_dropdown.pack(ipadx=20, ipady=10)

#        self.stuid_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0, show='*')
        self.t_e_dropdown.grid(row=1, column=1, pady=(20, 0), ipadx=10, ipady=10, sticky="ew")

        # Create and place the submit button widget
        submit_button_style = ttk.Style()
        submit_button_style.configure('SubmitButton.TButton', font=('Helvetica', 18, 'bold'), background="#333333", foreground="#FFFFFF")
        self.submit_button = ttk.Button(self, text="Submit", style='SubmitButton.TButton', command=self.show_next_frame)
        self.submit_button.pack(pady=(20, 10), ipadx=20, ipady=10)

        # Center the widgets
        self.pack(fill="both", expand=True)
        
        # Set window size to fit all elements
        self.master.update()
        self.master.geometry(f"{self.master.winfo_width()}x{self.master.winfo_height()}")


    # Launches next frame if all resources have loaded, and if user is authenticated 
    def show_next_frame(self):
        globals()["current_time"] = datetime.now()
        globals()["transaction_id"] = trans_id() 
        _name = self.netid_entry.get()
        _selection = self.t_e_dropdown.get()

        # globals()["input_name"] = self.netid_entry.get()

        if not _name or not _selection: 
            messagebox.showwarning("Warning", "Please enter a name and select a visitor type (drop down box).")
            return

        elif _name and _selection: 
            globals()["input_name"] = _name

            if _selection == "Visitor":
                globals()["REASON"] = 'Visitor'
                status_lbl.config(text="A few more things..")
            
                self.training_frame = VisitorFrame(self.master)
                self.training_frame.pack()
                self.destroy()
            elif _selection == "Contractor [Performing Work]":
                globals()["REASON"] = 'Contractor'
                status_lbl.config(text="A few more things..")     
                self.training_frame = ContractorFrame(self.master)
                self.training_frame.pack()
                self.destroy()
            elif _selection == "New Employee [Orientation]":
                globals()["REASON"] = 'New Employee'
                globals()["input_company"] = ''
                globals()["accompanied_check"] = False
                self.training_frame = EmployeeFrame(self.master)
                self.training_frame.pack()
                self.destroy()
                
        # Destroy the window
        #self.master.destroy()

# Use this if a the visitor has already been signed in previously, present the option to check out
class UserFrame(tk.Frame):
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")

        # Create and place the welcome label
        welcome_text = "Welcome racer!\n\nWhat what would you like to do today?"
        welcome_lbl = tk.Label(self, text=welcome_text, font=('Helvetica', 24, 'bold'), fg="#333333", bg="#FFFFFF")
        welcome_lbl.pack(pady=(20, 30))

        # Create and place the dropdown menu
        self.t_e_dropdown = ttk.Combobox(self, state="readonly", values=["Training", "Evaluation"])
        self.t_e_dropdown.pack(ipadx=20, ipady=10)

        # Create and place the next button widget
        next_button_style = ttk.Style()
        next_button_style.configure('NextButton.TButton', font=('Helvetica', 18, 'bold'), background="#333333", foreground="#FFFFFF")
        self.next_button = ttk.Button(self, text="Next", style='NextButton.TButton', command=self.next_frame)
        self.next_button.pack(pady=(20, 10), ipadx=20, ipady=10)

    def next_frame(self):
        if self.t_e_dropdown.get() == "Training":
            status_lbl.config(text="Awaiting Reward Function")
            self.training_frame = VisitorFrame(self.master)
            self.training_frame.pack()
            self.destroy()
        else:
            #self.eval_frame = EvaluateFrame(self.master)
            self.eval_frame.pack()
            self.destroy()


class VisitorFrame(tk.Frame):
    def __init__(self, master: tk.Tk, **kwargs: dict):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")

        # Create and place the welcome label
        greeting_lbl = tk.Label(self, text="Hi, {}".format(input_name), font=('Helvetica', 36, 'bold'), fg="#333333", bg="#FFFFFF")
        greeting_lbl.pack(pady=(20, 20))

        # Create and place the net-id entry widget
        input_frame = tk.Frame(self, bg="#FFFFFF")
        input_frame.pack(pady=(0, 40))

        phone_label = tk.Label(input_frame, text="Phone Number:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        phone_label.grid(row=0, column=1, padx=(0, 10), pady=(10, 10))

        self.phone_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.phone_entry.grid(row=1, column=1, padx=(0, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        company_label = tk.Label(input_frame, text="Name of Company [If Known]:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        company_label.grid(row=2, column=1, padx=(0, 10), pady=(10, 10))

        self.company_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.company_entry.grid(row=3, column=1, padx=(0, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        contact_label = tk.Label(input_frame, text="Name of Cargill Contact [If Known]:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        contact_label.grid(row=4, column=1, padx=(0, 10), pady=(20, 10))

        self.contact_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.contact_entry.grid(row=5, column=1, padx=(10, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        visit_label = tk.Label(input_frame, text="Purpose of Visit:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        visit_label.grid(row=6, column=1, padx=(0, 10), pady=(20, 10))

        self.visit_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.visit_entry.grid(row=7, column=1, padx=(0, 10), pady=(10, 20),ipadx=10, ipady=10, sticky="ew")

        # Create and place the submit button widget
        submit_button_style = ttk.Style()
        submit_button_style.configure('SubmitButton.TButton', font=('Helvetica', 18, 'bold'), background="#333333", foreground="#FFFFFF")
        self.submit_button = ttk.Button(self, text="Submit", style='SubmitButton.TButton', command=self.show_next_frame)
        self.submit_button.pack(pady=(20, 10), ipadx=20, ipady=10)


        # Center the widgets
        self.pack(fill="both", expand=True)

        # Set window size to fit all elements
        self.master.update()
        self.master.geometry(f"{self.master.winfo_width()}x{self.master.winfo_height()}")


    def show_next_frame(self):
        print('lol')
        self.welceom_frame = WelcomeFrame(self.master)

        self.welceom_frame.pack()
        self.destroy()

class ContractorFrame(tk.Frame):
    def __init__(self, master: tk.Tk, **kwargs: dict):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")

        # Create and place the welcome label
        greeting_lbl = tk.Label(self, text="Hi, {}".format(input_name), font=('Helvetica', 36, 'bold'), fg="#333333", bg="#FFFFFF")
        greeting_lbl.pack(pady=(20, 20))

        # Create and place the net-id entry widget
        input_frame = tk.Frame(self, bg="#FFFFFF")
        input_frame.pack(pady=(0, 40))

        phone_label = tk.Label(input_frame, text="Phone Number:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        phone_label.grid(row=0, column=1, padx=(0, 10), pady=(10, 10))

        self.phone_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.phone_entry.grid(row=1, column=1, padx=(0, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        company_label = tk.Label(input_frame, text="Name of Company:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        company_label.grid(row=2, column=1, padx=(0, 10), pady=(10, 10))

        self.company_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.company_entry.grid(row=3, column=1, padx=(0, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        contact_label = tk.Label(input_frame, text="Name of Cargill Contact:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        contact_label.grid(row=4, column=1, padx=(0, 10), pady=(20, 10))

        self.contact_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.contact_entry.grid(row=5, column=1, padx=(10, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        visit_label = tk.Label(input_frame, text="Project/Work Area", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        visit_label.grid(row=6, column=1, padx=(0, 10), pady=(20, 10))

        self.visit_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.visit_entry.grid(row=7, column=1, padx=(0, 10), pady=(10, 20),ipadx=10, ipady=10, sticky="ew")

        # Create and place the submit button widget
        submit_button_style = ttk.Style()
        submit_button_style.configure('SubmitButton.TButton', font=('Helvetica', 18, 'bold'), background="#333333", foreground="#FFFFFF")
        self.submit_button = ttk.Button(self, text="Submit", style='SubmitButton.TButton', command=self.show_next_frame)
        self.submit_button.pack(pady=(20, 10), ipadx=20, ipady=10)


        # Center the widgets
        self.pack(fill="both", expand=True)

        # Set window size to fit all elements
        self.master.update()
        self.master.geometry(f"{self.master.winfo_width()}x{self.master.winfo_height()}")

    def show_next_frame(self):
        self.welcome_frame = WelcomeFrame(self.master)

        self.welcome_frame.pack()
        self.destroy()


class EmployeeFrame(tk.Frame):
    def __init__(self, master: tk.Tk, **kwargs: dict):
        super().__init__(master, **kwargs)
        self.master = master
        self.configure(bg="#FFFFFF")

        # Create and place the welcome label
        greeting_lbl = tk.Label(self, text="Hi, {}".format(input_name), font=('Helvetica', 36, 'bold'), fg="#333333", bg="#FFFFFF")
        greeting_lbl.pack(pady=(20, 20))

        # Create and place the net-id entry widget
        input_frame = tk.Frame(self, bg="#FFFFFF")
        input_frame.pack(pady=(0, 40))

        contact_label = tk.Label(input_frame, text="Name of Cargill Supervisor [If Known]:", font=('Helvetica', 18), fg="#333333", bg="#FFFFFF")
        contact_label.grid(row=2, column=1, padx=(0, 10), pady=(20, 10))

        self.contact_entry = tk.Entry(input_frame, font=('Helvetica', 18), fg="#333333", bg="#F4F4F4", highlightthickness=0, borderwidth=0)
        self.contact_entry.grid(row=3, column=1, padx=(10, 10), pady=(10, 20), ipadx=10, ipady=10, sticky="ew")

        # Create and place the submit button widget
        submit_button_style = ttk.Style()
        submit_button_style.configure('SubmitButton.TButton', font=('Helvetica', 18, 'bold'), background="#333333", foreground="#FFFFFF")
        self.submit_button = ttk.Button(self, text="Submit", style='SubmitButton.TButton', command=self.show_next_frame)
        self.submit_button.pack(pady=(20, 10), ipadx=20, ipady=10)


        # Center the widgets
        self.pack(fill="both", expand=True)

        # Set window size to fit all elements
        self.master.update()
        self.master.geometry(f"{self.master.winfo_width()}x{self.master.winfo_height()}")

    def show_next_frame(self):
        self.welcome_frame = WelcomeFrame(self.master)

        self.welcome_frame.pack()
        self.destroy()


if __name__ == "__main__":
        
    root = tk.Tk()
    root.geometry('1920x1080')
    root['background'] = '#FFFFFF'
 
    # Load the new icon
    icon = tk.PhotoImage(file='p_icon.ico')
    # Set the new icon
    root.iconphoto(True, icon)

    #start splash screen
    splash = SplashFrame(root)
    splash.pack(fill="both", expand=True)
    splash.update()

    root.title("Cargill Visitor Check-in")

    # label for root window
    title_lbl = tk.Label(root, text="Schuyler Visitor Check-In", font='Arial 26 bold', bg='#658D1B', fg='#FFFFFF', bd=10)
    title_lbl.pack(side=tk.TOP, fill=tk.X, pady=0)

    # create a status bar label widget
    status_lbl = tk.Label(root, text="Welcome to Cargill, please sign-in!", font=('Helvetica', 16, 'bold'), bg='#F1BE48', fg='#C8102E', bd=4, relief=tk.SUNKEN, anchor=tk.W)
    status_lbl.pack(side=tk.BOTTOM, fill=tk.X)

    # display the WelcomeFrame
    welcome_frame = WelcomeFrame(root)
    welcome_frame.pack()

    root.mainloop()